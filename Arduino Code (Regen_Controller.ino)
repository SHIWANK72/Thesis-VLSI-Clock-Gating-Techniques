/*******************************************************************************
 *
 * Project: Innovative Regenerative Braking System for EVs
 * Author: Shiwank Gupta
 *
 * Description: This Arduino sketch implements the control logic for a
 * regenerative braking system. It monitors brake and throttle inputs to
 * intelligently switch a MOSFET-based circuit, enabling energy recovery
 * when the vehicle is decelerating.
 *
 ******************************************************************************/

// === Pin Definitions ===
const int BRAKE_PIN = 2;         // Digital input from brake lever
const int THROTTLE_PIN = A0;     // Analog input from throttle
const int MOTOR_SPEED_PIN = A1;  // Analog input from motor speed sensor (simulated)
const int REGEN_SWITCH_PIN = 4;  // Digital output to MOSFET gate

// === Thresholds & Constants ===
const int MIN_REGEN_SPEED = 500; // Minimum motor speed reading to enable regen
const int THROTTLE_IDLE_THRESHOLD = 50;  // Threshold to consider throttle as released

// === System State Function ===
// This function reads all sensors and determines the current state.
void readSystemState(bool &isBraking, int &throttleValue, int &motorSpeed) {
    isBraking = (digitalRead(BRAKE_PIN) == HIGH);
    throttleValue = analogRead(THROTTLE_PIN);
    motorSpeed = analogRead(MOTOR_SPEED_PIN);
}

// === Control Logic Function ===
// This function decides whether to enable regenerative braking.
void updateRegenMode(bool isBraking, int throttleValue, int motorSpeed) {
    // Condition: Is the vehicle decelerating AND moving fast enough?
    if ((isBraking || throttleValue < THROTTLE_IDLE_THRESHOLD) && (motorSpeed > MIN_REGEN_SPEED)) {
        digitalWrite(REGEN_SWITCH_PIN, HIGH); // Activate regen circuit
        Serial.println("STATUS: REGENERATIVE BRAKING ACTIVE");
    } else {
        digitalWrite(REGEN_SWITCH_PIN, LOW); // Deactivate regen circuit
        Serial.println("STATUS: Driving / Idle");
    }
}

// === Main Program ===
void setup() {
    Serial.begin(9600);
    pinMode(BRAKE_PIN, INPUT);
    pinMode(REGEN_SWITCH_PIN, OUTPUT);

    // Ensure the regen circuit is off at startup
    digitalWrite(REGEN_SWITCH_PIN, LOW);
    Serial.println("Regenerative Braking Controller Initialized.");
}

void loop() {
    // Declare variables to hold the current state
    bool isBraking;
    int throttleValue, motorSpeed;

    // 1. Read the current state of all sensors
    readSystemState(isBraking, throttleValue, motorSpeed);

    // 2. Update the system based on the new state
    updateRegenMode(isBraking, throttleValue, motorSpeed);

    // 3. Wait before the next cycle
    delay(200);
}
